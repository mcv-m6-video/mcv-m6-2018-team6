#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
#--------------------------------------------------------------------
# M6 - Video Analysis: Video Surveillance for Road Traffic Monitoring
# Team06: YI XIAO, Juan Felipe Montesinos,Ferran Carrasquer

# week 1: Introduction, Databases, Evaluation Metrics

# This .py file is for defining some functions of evaluation
#--------------------------------------------------------------------
"""
import os
import numpy as np
from sklearn.metrics import precision_recall_curve as PRC
from sklearn.metrics import precision_recall_fscore_support as PRFmetrics
from PIL import Image


# Input the folder path of the results and groundtruth, this function will output the precision, recall, f1_score for all the frames
def evaluateAllFrames(folder_path, gt_path):
    predVector = []
    trueVector = []
    if len(os.listdir(folder_path))==len(os.listdir(gt_path)):
        for i in range(len(os.listdir(folder_path))):
            image = np.asarray(Image.open(os.path.join(folder_path, os.listdir(folder_path)[i])))
            image = image*255
            gtImage = np.asarray(Image.open(os.path.join(gt_path, os.listdir(gt_path)[i])))
            if gtImage.size == image.size:
                for ridx in range(image.shape[0]):
                    for cidx in range(image.shape[1]):
                        predVector.append(image[ridx,cidx])
                        trueVector.append(gtImage[ridx,cidx])
            else:
                print('The image size of image and ground-truth is not corresponding!')
    else:
        print('The number of images are not corresponding!')

    trueArray = np.asarray(trueVector)
    predArray = np.asarray(predVector)
    TP=0
    TN=0
    FP=0
    FN=0
    for j in range(len(trueArray)):
        # True Positive (TP): we predict a label of 255 is positive, and the gt is 255.
        if (trueArray[j] == predArray[j] == 255):
            TP = TP+1
        # True Negative (TN): we predict a label of 0 is negative, and the gt is 0.
        if (trueArray[j] in [0,50,85,170]) and (predArray[j] == 0):
            TN = TN+1
        # False Positive (FP): we predict a label of 255 is positive, but the gt is 0.
        if (trueArray[j] in [0,50,85,170]) and (predArray[j] == 255):
            FP = FP+1
        # False Negative (FN): we predict a label of 0 is negative, but the gt is 255.
        if (trueArray[j] == 255) and (predArray[j] == 0):
            FN = FN+1
    precision = float(TP)/(TP+FP)
    recall = float(TP)/(TP+FN)
    f1_score = 2*precision*recall/(precision+recall)
    return precision, recall, f1_score



# Input the pair of image and gt, this function will output the TP, FP, TN, FN
def evaluateOneFrame(frame,gt):
    predVector = []
    trueVector = []
    for p in range(0,frame.size):
        predVector.append(frame.flat[p])
    for p in range(0,gt.size):
        trueVector.append(gt.flat[p])
    trueArray = np.asarray(trueVector)
    predArray = np.asarray(predVector)     
    TP=0
    TN=0
    FP=0
    FN=0
    # for the gt, we only consider two classes(0,255) represent background and motion respectively.
    for j in range(len(trueArray)):
        # True Positive (TP): we predict a label of 255 is positive, and the gt is 255.
        if (trueArray[j] == predArray[j] == 255):
            TP = TP+1
        # True Negative (TN): we predict a label of 0 is negative, and the gt is 0.
        elif (trueArray[j] in [0,50,85,170]) and (predArray[j] == 0):
            TN = TN+1
        # False Positive (FP): we predict a label of 255 is positive, but the gt is 0.
        elif (trueArray[j] in [0,50,85,170]) and (predArray[j] == 255):
            FP = FP+1
        # False Negative (FN): we predict a label of 0 is negative, but the gt is 255.
        elif (trueArray[j] == 255) and (predArray[j] == 0):
            FN = FN+1
            
    if TP!=0 and (TP+FP)!=0 and (TP+FN)!=0:
        precision_one=float(TP)/(TP+FP)
        recall_one=float(TP)/(TP+FN)
        f1_score_one=2*precision_one*recall_one/(precision_one+recall_one)
    else:
        f1_score_one=0.0
    
    return TP, FN, f1_score_one
            
    
    
